#pragma once


namespace cve_2020_1034::exception {
namespace details {
 
	template<typename T>
	struct LocalFreeDeleter final
	{
		void operator()(T* ptr) const noexcept
		{
			if (ptr) {
				::LocalFree(ptr);
			}
		}
	};


	template<typename T>
	using BufferGuard = std::unique_ptr<T, LocalFreeDeleter<T>>;

} // namespace details


	class native_error final
		: public std::exception
	{
	public:
		explicit native_error(DWORD dwCode, LPCSTR lpszFunction, LPCSTR lpszFile, ULONG ulLine)
			: std::exception{}
			, m_sDescription{ FormatErrorMessage(dwCode, lpszFunction, lpszFile, ulLine) }
		{ }

		const char* what() const noexcept override { return m_sDescription.c_str(); }

	private:
		static std::string FormatErrorMessage(DWORD dwCode, LPCSTR lpszFunction, LPCSTR lpszFile, ULONG ulLine)
		{
			//
			// Buffer will be allocated in FormatMessage 
			// and released by smart pointer
			// 

			LPSTR lpBuffer = nullptr;
			details::BufferGuard<CHAR> spGuard{ lpBuffer };

			DWORD dwFlags = FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS;
			DWORD dwWritten = ::FormatMessageA(dwFlags, nullptr, dwCode, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
				reinterpret_cast<LPSTR>(&lpBuffer), 0, nullptr);

			const auto sDescription = dwWritten 
				? std::string(lpBuffer, dwWritten)
				: std::to_string(dwCode);

			return std::format("Description: {}\nFunction: {}\nLocation: {}:{}", 
				sDescription, lpszFunction, lpszFile, ulLine);
		}

	private:
		std::string m_sDescription;
	};

	
	//
	// Several useful macro definitions
	// 

	#define NATIVE_THROW(code)							\
		throw cve_2020_1034::exception::native_error{	\
			static_cast<DWORD>(code), __FUNCTION__,		\
			__FILE__, __LINE__ }						\

	#define NATIVE_THROW_LAST()							\
		NATIVE_THROW(GetLastError())

	#define	NATIVE_CHECK_POINTER(ptr, code)				\
		if (!(ptr)) {									\
			NATIVE_THROW(code);							\
		}

	#define NATIVE_CHECK_POINTER_LAST(ptr)				\
		NATIVE_CHECK_POINTER(ptr, GetLastError())

	#define NATIVE_CHECK_ERROR(code)					\
		if (code != ERROR_SUCCESS) {					\
			NATIVE_THROW(code);							\
		}

} // namespace cve_2020_1034::exception