#ifndef _IORING_H_
#define _IORING_H_

#include "win_defs.h"

typedef struct _NT_IORING_CREATE_FLAGS
{
    enum _NT_IORING_CREATE_REQUIRED_FLAGS Required;
    enum _NT_IORING_CREATE_ADVISORY_FLAGS Advisory;
} NT_IORING_CREATE_FLAGS, * PNT_IORING_CREATE_FLAGS;

typedef struct _NT_IORING_INFO
{
    enum IORING_VERSION IoRingVersion;
    struct _NT_IORING_CREATE_FLAGS Flags;
    unsigned int SubmissionQueueSize;
    unsigned int SubmissionQueueRingMask;
    unsigned int CompletionQueueSize;
    unsigned int CompletionQueueRingMask;
    struct _NT_IORING_SUBMISSION_QUEUE* SubmissionQueue;
    struct _NT_IORING_COMPLETION_QUEUE* CompletionQueue;
} NT_IORING_INFO, * PNT_IORING_INFO;

typedef struct _IOP_MC_BUFFER_ENTRY
{
    USHORT Type;                // 结构体类型
    USHORT Reserved;            // 保留字段
    ULONG Size;                 // 结构体大小
    ULONG ReferenceCount;       // 结构体引用计数
    ULONG Flags;                // 标志位
    LIST_ENTRY GlobalDataLink;  // 全局数据链接列表
    PVOID Address;              // 缓冲区的地址
    ULONG Length;               // 缓冲区的长度
    CHAR AccessMode;            // 缓冲区的访问模式
    ULONG MdlRef;               // 缓冲区的MDL引用数
    struct _MDL* Mdl;           // 缓冲区的MDL
    KEVENT MdlRundownEvent;     // 缓冲区的MDL结束事件
    PULONG64 PfnArray;          // 物理页帧号数组的指针
    BYTE PageNodes[0x20];       // 物理页节点数组
} IOP_MC_BUFFER_ENTRY, * PIOP_MC_BUFFER_ENTRY;

typedef struct _IORING_OBJECT
{
    short Type;                                             // 结构体类型
    short Size;                                             // 结构体大小
    struct _NT_IORING_INFO UserInfo;                        // 包含IO环信息的结构体，包括IO环的大小、版本、队列大小等详细信息
    void* Section;                                          // 内存映射文件Section对象的指针
    struct _NT_IORING_SUBMISSION_QUEUE* SubmissionQueue;    // 存储IO请求的Submission Queue的指针
    struct _MDL* CompletionQueueMdl;                        // 缓存Completion Queue的MDL的指针
    struct _NT_IORING_COMPLETION_QUEUE* CompletionQueue;    // 存储IO请求完成状态的Completion Queue的指针
    unsigned __int64 ViewSize;                              // 映射视图的大小
    long InSubmit;                                          // IO请求的数量
    unsigned __int64 CompletionLock;                        // 保护计数器的锁，在读取CQring时使用
    unsigned __int64 SubmitCount;                           // 已提交IO请求SQEs的数量
    unsigned __int64 CompletionCount;                       // 已完成的IO请求数量
    unsigned __int64 CompletionWaitUntil;                   // 等待完成IO请求的时间，当完成请求缓存区被解锁时使用
    struct _KEVENT CompletionEvent;                         // 内核事件，在IO请求完成时发出
    unsigned char SignalCompletionEvent;                    // 是否使用信号量发出完成事件的标志
    struct _KEVENT* CompletionUserEvent;                    // 一个与CompletionEvent成分的用户事件。用户可以使用此事件来通知一个或多个等待线程，IO请求已完成。
    unsigned int RegBuffersCount;                           // 注册的缓冲区数量
    struct _IOP_MC_BUFFER_ENTRY** RegBuffers;               // 已注册的缓冲区列表的指针
    unsigned int RegFilesCount;                             // (异步)读取操作所涉及的文件句柄的数量
    void** RegFiles;                                        // (异步)读取操作所涉及的文件句柄列表的指针
} IORING_OBJECT, * PIORING_OBJECT;



typedef struct _HIORING
{
    HANDLE handle;                          // IO环操作对象的句柄
    NT_IORING_INFO Info;                    // 包含IO环信息的结构体，包括IO环的大小、版本、队列大小等详细信息
    ULONG IoRingKernelAcceptedVersion;      // 内核支持的IO环版本号
    PVOID RegBufferArray;                   // 注册缓冲区的指针，用于注册IO缓冲区
    ULONG BufferArraySize;                  // 注册缓冲区的大小
    PVOID Unknown;                          // 未知指针，可能提供额外的信息
    ULONG FileHandlesCount;                 // IO环管理的文件句柄数量
    ULONG SubQueueHead;                     // IO环子队列的头部索引
    ULONG SubQueueTail;                     // IO环子队列的尾部索引
} _HIORING;

int ioring_setup(PIORING_OBJECT* ppIoRingAddr);
int ioring_lpe(ULONG pid, ULONG64 ullFakeRegBufferAddr, DWORD dwFakeRegBufferCnt);

#endif